# -*- coding: utf-8 -*-
"""Tugas Pekan 9 - NLP - WSD Lesk.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YPe9wbLfpr_QHXyhcS72W-4m0DA0F8ld

# Word Sense Disambiguation.

Clarisa Hasya Y - 1301174256
"""

# pip install Sastrawi

# pip install kbbi

from kbbi import KBBI
from Sastrawi.StopWordRemover.StopWordRemoverFactory import StopWordRemoverFactory
import pandas as pd
import re
import nltk
nltk.download('punkt')

print(KBBI('bisa'))

print(KBBI('bunga'))

print(KBBI('tahu'))
print('\n')

thesaurus = pd.DataFrame(
    [
        ['bisa', 'bi.sa (1) (v)', 'mampu (kuasa melakukan sesuatu); dapat','ia -- membaca, tetapi tidak -- menulis'],
        ['bisa', 'bi.sa (2) (n) 1', 'zat racun yang dapat menyebabkan luka, busuk, atau mati bagi sesuatu yang hidup (biasanya terdapat pada binatang)'],
        ['bisa', 'bi.sa (2) (n) (ki) 2', 'sesuatu yang buruk, yang dapat merusakkan akhlak manusia atau masyarakat', 'ajaranmu itu akan menjadi -- bagi kami'],
        ['bisa', 'bi.sa (3) (n) (Wl)', 'sapaan kepada dukun yang berasal dari golongan bangsawan dan walaka yang biasa melakukan upacara adat pingitan'],
        ['bunga', 'bu.nga (1) (n) 1', 'bagian tumbuhan yang akan menjadi buah, biasanya elok warnanya dan harum baunya; kembang', '-- mangga; -- rambutan'],
        ['bunga', 'bu.nga (1) (n) 2', 'jenis untuk berbagai-bagai bunga', '-- melati; -- mawar'],
        ['bunga', 'bu.nga (1) (n) 3', 'gambar hiasan (pada kain, pamor ukiran, dan sebagainya)'],
        ['bunga', 'bu.nga (1) (n) 4', 'tambahan untuk memperindah', 'ceritanya itu sudah banyak --nya'], 
        ['bunga', 'bu.nga (1) (n) 5', 'tanda-tanda baik', 'sudah tampak --nya bahwa tuntutan kita akan berhasil'],
        ['bunga', 'bu.nga (1) (n) (ki) 6', 'sesuatu yang dianggap elok (cantik) seperti bunga', 'gadis itu adalah -- di kampungnya'],
        ['bunga', 'bu.nga (1) (n) (ki) 7', 'nama yang dipakai untuk beberapa jenis tumbuhan yang tidak berkerabat satu sama lain', ' -- bangkai, -- ketongkeng, -- manila'],
        ['bunga', 'bu.nga (2) (n) (Ek) 1', 'imbalan jasa untuk penggunaan uang atau modal yang dibayar pada waktu tertentu berdasarkan ketentuan atau kesepakatan, umumnya dinyatakan sebagai persentase dari modal pokok'],
        ['bunga', 'bu.nga (2) (n) (Ek) 2', 'pendapatan atas setiap investasi modal'],
        ['tahu', 'ta.hu (1) (v) 1', 'mengerti sesudah melihat (menyaksikan, mengalami, dan sebagainya)', 'ia -- bahwa saya yang menolongnya; perkara mesin, dia lebih -- daripada saya'],
        ['tahu', 'ta.hu (1) (v) 2', '(v)  kenal (akan); mengenal', 'ia tidak -- akan sanak saudaranya lagi'],
        ['tahu', 'ta.hu (1) (v) 3', 'mengindahkan; memedulikan', 'ia sudah tidak mau -- lagi kepada anaknya'],
        ['tahu', 'ta.hu (1) (v) 4', 'mengerti; berpengertian', 'siapa yang -- apa maksud tanda ini?'],
        ['tahu', 'ta.hu (1) (v) 5', 'pandai; cakap', 'sedikit-sedikit saya -- juga tentang mesin'],
        ['tahu', 'ta.hu (1) (v) 6', 'insaf; sadar', 'dia tidak -- akan kekurangannya'],
        ['tahu', 'ta.hu (1) (v) (cak) 7', 'pernah', 'petinju itu tidak -- menang, adikku tidak -- membolos'],
        ['tahu', 'ta.hu (2) (n)', 'makanan dari kedelai putih yang digiling halus-halus, direbus, dan dicetak']     
    ],
    columns=['word', 'sense','definition','examples']
)

thesaurus = thesaurus.set_index('word')
thesaurus

stopword = set(StopWordRemoverFactory().get_stop_words()) # kata-kata stopword
# print(stopword)

def overlapcontext( signature, sentence ):
    count = 0
    signature = signature.difference(stopword)
    sentence = sentence.difference(stopword)
    for word in signature:
        for word_sense in sentence:
            if (word == word_sense):
                count += 1
                # print(word, word_sense)
    return count

def lesk( word, sentence ):
    bestsense = None
    maxoverlap = 0
    senses = thesaurus.loc[word, :]
    for id, sense in senses.iterrows():
        if sense['examples'] != None:
            sense['definition'] = re.sub(r'\W',' ',sense['definition'])
            sense['examples'] = re.sub(r'\W',' ',sense['examples'])
            signature = nltk.word_tokenize(sense['definition']) + nltk.word_tokenize(sense['examples'])
        else:
            sense['definition'] = re.sub(r'\W',' ',sense['definition'])
            signature = nltk.word_tokenize(sense['definition'])
        overlap = overlapcontext(set(signature), set(sentence))
        if overlap > maxoverlap:
            maxoverlap = overlap
            bestsense = sense['sense']
    return bestsense

sent_1 = ['saya','bisa','menulis']
sent_2 = ['kucing','itu','terkena','bisa','ular','sehingga','mati']
sent_3 = ['kamu','memberi','saya','bunga','mawar']
sent_4 = ['meminjam','uang','di','bank','akan','terkena','bunga']
sent_5 = ['adik','suka','makan','tahu','kedelai']
sent_6 = ['ayah','ternyata','tahu','atau','kenal','dengan','dia']

print(sent_1)
print(lesk('bisa', sent_1))
print('_________________________________________________________________')
print(sent_2)
print(lesk('bisa', sent_2))
print('_________________________________________________________________')
print(sent_3)
print(lesk('bunga', sent_3))
print('_________________________________________________________________')
print(sent_4)
print(lesk('bunga', sent_4))
print('_________________________________________________________________')
print(sent_5)
print(lesk('tahu', sent_5))
print('_________________________________________________________________')
print(sent_6)
print(lesk('tahu', sent_6))